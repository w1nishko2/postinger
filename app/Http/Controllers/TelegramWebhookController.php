<?php

namespace App\Http\Controllers;

use App\Models\Bot;
use App\Models\Channel;
use App\Models\Post;
use App\Models\UserSession;
use App\Services\TelegramService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class TelegramWebhookController extends Controller
{
    private $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
     */
    public function handle(Request $request, $botId)
    {
        try {
            $bot = Bot::findOrFail($botId);
            $update = $request->all();

            Log::info('Telegram webhook received', ['bot_id' => $botId, 'update' => $update]);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
            if (isset($update['callback_query'])) {
                return $this->handleCallbackQuery($bot, $update['callback_query']);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!isset($update['message'])) {
                return response()->json(['ok' => true]);
            }

            $message = $update['message'];
            $userId = $message['from']['id'] ?? null;
            $chatId = $message['chat']['id'] ?? null;

            // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_user_id
            $client = $bot->client;
            
            if (!$client || $client->telegram_user_id != $userId) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                $this->telegramService->sendMessage(
                    $bot,
                    $chatId,
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.'
                );
                return response()->json(['ok' => true]);
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $session = UserSession::firstOrCreate(
                [
                    'bot_id' => $bot->id,
                    'telegram_user_id' => $userId,
                ],
                [
                    'client_id' => $client->id,
                    'telegram_chat_id' => $chatId,
                    'state' => 'idle',
                ]
            );

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (isset($message['text']) && str_starts_with($message['text'], '/')) {
                return $this->handleCommand($bot, $client, $session, $message);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
            return $this->handleMessage($bot, $client, $session, $message);

        } catch (\Exception $e) {
            Log::error('Webhook handling error: ' . $e->getMessage());
            return response()->json(['ok' => false, 'error' => $e->getMessage()], 500);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
     */
    private function handleCommand(Bot $bot, $client, UserSession $session, array $message): \Illuminate\Http\JsonResponse
    {
        $command = explode(' ', $message['text'])[0];
        $chatId = $message['chat']['id'];

        switch ($command) {
            case '/start':
                $keyboard = $this->telegramService->createReplyKeyboard([
                    [['text' => 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å']],
                    [['text' => 'üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã'], ['text' => '‚ùå –û—Ç–º–µ–Ω–∞']],
                ]);

                $this->telegramService->sendMessage(
                    $bot,
                    $chatId,
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" .
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.\n\n" .
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n" .
                    "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" .
                    "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n" .
                    "‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n" .
                    "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–∞–ª—å–±–æ–º—ã)",
                    $keyboard
                );

                $session->update(['state' => 'idle']);
                break;

            case '/cancel':
                $this->cancelSession($bot, $session);
                break;

            default:
                $this->telegramService->sendMessage(
                    $bot,
                    $chatId,
                    '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.'
                );
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private function handleMessage(Bot $bot, $client, UserSession $session, array $message): \Illuminate\Http\JsonResponse
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if ($text === 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å') {
            return $this->startCreatingPost($bot, $client, $session, $chatId);
        }

        if ($text === 'üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã') {
            return $this->showChannels($bot, $client, $chatId);
        }

        if ($text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            return $this->cancelSession($bot, $session);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch ($session->state) {
            case 'creating_post':
                return $this->collectPostContent($bot, $client, $session, $message);

            case 'idle':
            default:
                $this->telegramService->sendMessage(
                    $bot,
                    $chatId,
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.'
                );
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
     */
    private function startCreatingPost(Bot $bot, $client, UserSession $session, string $chatId): \Illuminate\Http\JsonResponse
    {
        $channels = Channel::where('client_id', $client->id)
            ->where('bot_id', $bot->id)
            ->where('is_active', true)
            ->get();

        if ($channels->isEmpty()) {
            $this->telegramService->sendMessage(
                $bot,
                $chatId,
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.'
            );
            return response()->json(['ok' => true]);
        }

        $keyboard = $this->telegramService->createReplyKeyboard([
            [['text' => '‚úÖ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'], ['text' => '‚ùå –û—Ç–º–µ–Ω–∞']],
        ]);

        $this->telegramService->sendMessage(
            $bot,
            $chatId,
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏</b>\n\n" .
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞.\n" .
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.\n\n" .
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>",
            $keyboard
        );

        $session->update([
            'state' => 'creating_post',
            'post_content' => null,
            'media_type' => null,
            'media_files' => [],
            'selected_channels' => [],
        ]);

        return response()->json(['ok' => true]);
    }

    /**
     * –°–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
     */
    private function collectPostContent(Bot $bot, $client, UserSession $session, array $message): \Illuminate\Http\JsonResponse
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
        if ($text === '‚úÖ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å') {
            if (empty($session->post_content) && empty($session->media_files)) {
                $this->telegramService->sendMessage(
                    $bot,
                    $chatId,
                    '‚ùå –ü–æ—Å—Ç –ø—É—Å—Ç–æ–π! –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã.'
                );
                return response()->json(['ok' => true]);
            }

            return $this->showChannelSelection($bot, $client, $session, $chatId);
        }

        if ($text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            return $this->cancelSession($bot, $session);
        }

        // –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        $content = $session->post_content ?? '';
        $mediaFiles = $session->media_files ?? [];
        $mediaType = $session->media_type ?? 'text';

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        if (isset($message['text'])) {
            $content .= ($content ? "\n\n" : '') . $message['text'];
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
        if (isset($message['caption'])) {
            $content .= ($content ? "\n\n" : '') . $message['caption'];
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if (isset($message['photo'])) {
            $photo = end($message['photo']);
            $mediaFiles[] = $photo['file_id'];
            $mediaType = empty($mediaFiles) || $mediaType === 'text' ? 'photo' : 'mixed';
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        if (isset($message['video'])) {
            $mediaFiles[] = $message['video']['file_id'];
            $mediaType = empty($mediaFiles) || $mediaType === 'text' ? 'video' : 'mixed';
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (isset($message['document'])) {
            $mediaFiles[] = $message['document']['file_id'];
            $mediaType = 'document';
        }

        $session->update([
            'post_content' => $content,
            'media_files' => $mediaFiles,
            'media_type' => $mediaType,
        ]);

        $mediaCount = count($mediaFiles);
        $this->telegramService->sendMessage(
            $bot,
            $chatId,
            "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n\n" .
            "üìÑ –¢–µ–∫—Å—Ç: " . (strlen($content) > 0 ? mb_substr($content, 0, 50) . '...' : '–Ω–µ—Ç') . "\n" .
            "üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {$mediaCount}\n\n" .
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>"
        );

        return response()->json(['ok' => true]);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
     */
    private function showChannelSelection(Bot $bot, $client, UserSession $session, string $chatId): \Illuminate\Http\JsonResponse
    {
        $channels = Channel::where('client_id', $client->id)
            ->where('bot_id', $bot->id)
            ->where('is_active', true)
            ->get();

        $buttons = [];
        
        // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∫–∞–Ω–∞–ª—ã"
        $buttons[] = [
            ['text' => '‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã', 'callback_data' => 'select_all_channels']
        ];

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        foreach ($channels as $channel) {
            $buttons[] = [
                [
                    'text' => $channel->name,
                    'callback_data' => 'toggle_channel_' . $channel->id
                ]
            ];
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        $buttons[] = [
            ['text' => 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'callback_data' => 'publish_post'],
            ['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel_post']
        ];

        $keyboard = $this->telegramService->createInlineKeyboard($buttons);

        $preview = $this->getPostPreview($session);

        $this->telegramService->sendMessage(
            $bot,
            $chatId,
            "üì¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n" .
            "<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n" .
            $preview . "\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç:",
            $keyboard
        );

        $session->update(['state' => 'selecting_channels']);

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
     */
    private function handleCallbackQuery(Bot $bot, array $callbackQuery): \Illuminate\Http\JsonResponse
    {
        $callbackId = $callbackQuery['id'];
        $data = $callbackQuery['data'];
        $userId = $callbackQuery['from']['id'];
        $chatId = $callbackQuery['message']['chat']['id'];
        $messageId = $callbackQuery['message']['message_id'];

        $session = UserSession::where('bot_id', $bot->id)
            ->where('telegram_user_id', $userId)
            ->first();

        if (!$session) {
            $this->telegramService->answerCallbackQuery($bot, $callbackId, '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
            return response()->json(['ok' => true]);
        }

        $client = $session->client;

        // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        if ($data === 'select_all_channels') {
            $channels = Channel::where('client_id', $client->id)
                ->where('bot_id', $bot->id)
                ->where('is_active', true)
                ->pluck('id')
                ->toArray();

            $session->update(['selected_channels' => $channels]);

            $this->telegramService->answerCallbackQuery($bot, $callbackId, '‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞–Ω–∞–ª—ã');
            $this->updateChannelSelectionMessage($bot, $session, $chatId, $messageId);
            return response()->json(['ok' => true]);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª
        if (str_starts_with($data, 'toggle_channel_')) {
            $channelId = (int) str_replace('toggle_channel_', '', $data);
            $selectedChannels = $session->selected_channels ?? [];

            if (in_array($channelId, $selectedChannels)) {
                $selectedChannels = array_diff($selectedChannels, [$channelId]);
                $message = '‚ùå –ö–∞–Ω–∞–ª —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞';
            } else {
                $selectedChannels[] = $channelId;
                $message = '‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω';
            }

            $session->update(['selected_channels' => array_values($selectedChannels)]);

            $this->telegramService->answerCallbackQuery($bot, $callbackId, $message);
            $this->updateChannelSelectionMessage($bot, $session, $chatId, $messageId);
            return response()->json(['ok' => true]);
        }

        // –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
        if ($data === 'publish_post') {
            $selectedChannels = $session->selected_channels ?? [];

            if (empty($selectedChannels)) {
                $this->telegramService->answerCallbackQuery($bot, $callbackId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª', true);
                return response()->json(['ok' => true]);
            }

            return $this->publishPost($bot, $client, $session, $chatId, $callbackId);
        }

        // –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        if ($data === 'cancel_post') {
            $this->telegramService->answerCallbackQuery($bot, $callbackId, '–û—Ç–º–µ–Ω–µ–Ω–æ');
            return $this->cancelSession($bot, $session);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–æ–≤
     */
    private function updateChannelSelectionMessage(Bot $bot, UserSession $session, string $chatId, int $messageId): void
    {
        $client = $session->client;
        $selectedChannels = $session->selected_channels ?? [];

        $channels = Channel::where('client_id', $client->id)
            ->where('bot_id', $bot->id)
            ->where('is_active', true)
            ->get();

        $buttons = [];
        
        // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∫–∞–Ω–∞–ª—ã"
        $allSelected = count($selectedChannels) === $channels->count();
        $buttons[] = [
            ['text' => ($allSelected ? '‚úÖ' : '‚òëÔ∏è') . ' –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã', 'callback_data' => 'select_all_channels']
        ];

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        foreach ($channels as $channel) {
            $isSelected = in_array($channel->id, $selectedChannels);
            $buttons[] = [
                [
                    'text' => ($isSelected ? '‚úÖ ' : '') . $channel->name,
                    'callback_data' => 'toggle_channel_' . $channel->id
                ]
            ];
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        $buttons[] = [
            ['text' => 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (' . count($selectedChannels) . ')', 'callback_data' => 'publish_post'],
            ['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel_post']
        ];

        $keyboard = $this->telegramService->createInlineKeyboard($buttons);
        $preview = $this->getPostPreview($session);

        $this->telegramService->editMessageText(
            $bot,
            $chatId,
            $messageId,
            "üì¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n" .
            "<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n" .
            $preview . "\n\n" .
            "–í—ã–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: <b>" . count($selectedChannels) . "</b>",
            $keyboard
        );
    }

    /**
     * –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
     */
    private function publishPost(Bot $bot, $client, UserSession $session, string $chatId, string $callbackId): \Illuminate\Http\JsonResponse
    {
        $selectedChannels = $session->selected_channels ?? [];
        $channels = Channel::whereIn('id', $selectedChannels)->get();

        $successCount = 0;
        $failCount = 0;

        foreach ($channels as $channel) {
            try {
                $post = Post::create([
                    'channel_id' => $channel->id,
                    'client_id' => $client->id,
                    'content' => $session->post_content,
                    'media_type' => $session->media_type ?? 'text',
                    'media_files' => $session->media_files ?? [],
                    'status' => 'pending',
                ]);

                if ($this->telegramService->publishPost($post)) {
                    $successCount++;
                } else {
                    $failCount++;
                }
            } catch (\Exception $e) {
                Log::error('Error publishing to channel: ' . $e->getMessage());
                $failCount++;
            }
        }

        $keyboard = $this->telegramService->createReplyKeyboard([
            [['text' => 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å']],
            [['text' => 'üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã'], ['text' => '‚ùå –û—Ç–º–µ–Ω–∞']],
        ]);

        $message = "üéâ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n";
        $message .= "‚úÖ –£—Å–ø–µ—à–Ω–æ: {$successCount}\n";
        if ($failCount > 0) {
            $message .= "‚ùå –û—à–∏–±–æ–∫: {$failCount}\n";
        }

        $this->telegramService->answerCallbackQuery($bot, $callbackId, '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...');
        $this->telegramService->sendMessage($bot, $chatId, $message, $keyboard);

        // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        $session->update([
            'state' => 'idle',
            'post_content' => null,
            'media_type' => null,
            'media_files' => [],
            'selected_channels' => [],
        ]);

        return response()->json(['ok' => true]);
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
     */
    private function cancelSession(Bot $bot, UserSession $session): \Illuminate\Http\JsonResponse
    {
        $keyboard = $this->telegramService->createReplyKeyboard([
            [['text' => 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å']],
            [['text' => 'üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã'], ['text' => '‚ùå –û—Ç–º–µ–Ω–∞']],
        ]);

        $this->telegramService->sendMessage(
            $bot,
            $session->telegram_chat_id,
            '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
            $keyboard
        );

        $session->update([
            'state' => 'idle',
            'post_content' => null,
            'media_type' => null,
            'media_files' => [],
            'selected_channels' => [],
        ]);

        return response()->json(['ok' => true]);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
     */
    private function showChannels(Bot $bot, $client, string $chatId): \Illuminate\Http\JsonResponse
    {
        $channels = Channel::where('client_id', $client->id)
            ->where('bot_id', $bot->id)
            ->where('is_active', true)
            ->get();

        if ($channels->isEmpty()) {
            $message = "üìã <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.";
        } else {
            $message = "üìã <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n";
            foreach ($channels as $index => $channel) {
                $message .= ($index + 1) . ". " . $channel->name . "\n";
                $message .= "   ID: <code>" . $channel->channel_id . "</code>\n\n";
            }
        }

        $this->telegramService->sendMessage($bot, $chatId, $message);

        return response()->json(['ok' => true]);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
     */
    private function getPostPreview(UserSession $session): string
    {
        $preview = '';

        if ($session->post_content) {
            $content = mb_strlen($session->post_content) > 100 
                ? mb_substr($session->post_content, 0, 100) . '...' 
                : $session->post_content;
            $preview .= "üìÑ {$content}\n\n";
        }

        $mediaFiles = $session->media_files ?? [];
        if (!empty($mediaFiles)) {
            $preview .= "üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: " . count($mediaFiles) . "\n";
            $preview .= "üì∑ –¢–∏–ø: " . ($session->media_type ?? 'text') . "\n";
        }

        return $preview ?: '(–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç)';
    }
}
